apply plugin: 'com.android.application'
apply from: '../codequality/quality.gradle'

/*
 * Read API key from CI server or from keys.properties file
 */
def readApiKey = {
    String apiKey = ""
    if (System.getenv("CI")) {
        apiKey = System.getenv("API_KEY")
    } else {
        Properties props = new Properties()
        try {
            props.load(new FileInputStream(new File(getRootDir().getAbsolutePath() + "/keys.properties")))
            apiKey = props.getProperty("api_key")
        } catch (FileNotFoundException fnfe) {
            println("Please create a keys.properties file in the root directory of the project")
        }
    }
    return "\"$apiKey\"";
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    dataBinding {
        enabled true
    }

    defaultConfig {
        applicationId "com.segunfamisa.sample.mvvm"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        buildConfigField("String", "API_KEY", readApiKey())
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // support dependencies
    compile "com.android.support:appcompat-v7:$supportLibraryVersion"
    compile "com.android.support:support-v4:$supportLibraryVersion"
    compile "com.android.support:recyclerview-v7:$supportLibraryVersion"
    compile "com.android.support:design:$supportLibraryVersion"

    compile "android.arch.lifecycle:extensions:$archComponentsVersion"

    // other dependencies
    compile "com.squareup.retrofit2:retrofit:$retrofitVersion"
    compile "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    compile "com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion"
    compile "io.reactivex.rxjava2:rxandroid:$rxJavaVersion"
    compile "com.github.bumptech.glide:glide:$glideVersion"

    compile "com.google.code.gson:gson:$gsonVersion"

    // test dependencies
    testCompile "junit:junit:$jUnitVersion"
    androidTestCompile("com.android.support.test.espresso:espresso-core:$espressoCoreVersion", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile "org.mockito:mockito-core:$mockitoVersion"
}